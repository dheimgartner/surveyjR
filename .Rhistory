})
}
shiny::shinyApp(ui, server)
answers
devtools::load_all()
cancellation <- import_survey("./data-raw/survey_cancellation.json")
market_fit <- import_survey("./data-raw/survey_market_fit.json")
patient <- import_survey("./data-raw/survey_patient.json")
SURVEY <- list(cancellation = cancellation, market_fit = market_fit, patient = patient)
usethis::use_data(SURVEY, overwrite = TRUE)
library(shiny)
library(shinyjs)
library(htmltools)
rm(list = ls())
devtools::load_all()
THEME <-"bootstrap"
EXAMPLE <- SURVEY$patient
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "darkly"),
useShinyjs(),
useSurveyjr(theme = THEME),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = EXAMPLE)
observeEvent(input$answers, {
cat("Answers retrieved\n")
answers <<- get_answers(input$answers)
cat("Answers restructured and now sending to DB\n")
## send to DB and potentially redirect...
})
}
shiny::shinyApp(ui, server)
answers
tibble(answers)
View(answers)
library(tidyverse)
test <- answers %>% pivot_longer()
test <- answers %>% pivot_longer(cols = everything())
answers
tibble(answers)
answers %>% gather(key, value)
answers %>% gather(key, value) %>% as_tibble()
answers %>% gather(key, value) %>% as_tibble()
library(shinyjs)
help(package = "shinyjs")
runExample("sandbox")
devtools::load_all()
debugonce(useSurveyjr)
useSurveyjr()
theme
?match.arg
devtools::load_all()
debugonce(useSurveyjr)
useSurveyjr()
theme()
debugonce(useSurveyjr)
useSurveyjr(theme = "modern")
SURVEY
names(SURVEY)
SURVEY[["cancellation"]]
names(SURVEY)
runExample <- function(bootswatch, survey = c("cancellation", "market_fit", "patient")) {
## import survey.json with surveyjR::import_survey()
ui <- fluidPage(
## surveyjR works nicely together with bootswatch themes
theme = bslib::bs_theme(bootswatch = bootswatch),
## shinyjs needs to be registered
useShinyjs(),
## alternatively, a theme can be chosen in useSurveyjr
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
## id_answers will write the answers to input$id_answers
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY[[survey]])
observeEvent(input$answers, {
## pass input$id_answers to get_answers
answers <<- get_answers(input$answers)
## reformat, send to DB and potentially redirect...
})
}
shiny::shinyApp(ui, server)
return(answers)
}
runExample()
runExample(bootswatch = "darkly")
runExample <- function(bootswatch, survey = c("cancellation", "market_fit", "patient")) {
## import survey.json with surveyjR::import_survey()
ui <- fluidPage(
## surveyjR works nicely together with bootswatch themes
theme = bslib::bs_theme(bootswatch = bootswatch),
## shinyjs needs to be registered
useShinyjs(),
## alternatively, a theme can be chosen in useSurveyjr
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
## id_answers will write the answers to input$id_answers
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY[[survey]])
observeEvent(input$answers, {
## pass input$id_answers to get_answers
answers <<- get_answers(input$answers)
## reformat, send to DB and potentially redirect...
})
}
shiny::shinyApp(ui, server)
}
runExample()
runExample(bootswatch = "darkly")
devtools::load_all()
devtools::load_all()
run_example_survey(bootswatch = "darkly")
devtools::load_all()
run_example_survey(bootswatch = "darkly")
usethis::use_package("shiny")
bslib::theme_bootswatch()
bslib::bootswatch_themes()
usethis::use_package("jsonlite")
devtools::load_all()
surveyjR::surveyApp()
surveyjR::surveyApp(survey = "market_fit")
surveyjR::surveyApp("sandstone", "market_fit")
surveyjR::surveyApp("sandstone", "patient")
usethis::use_readme_md()
usethis::use_news_md()
usethis::use_lifecycle_badge("development")
usethis::use_lifecycle_badge("experimental")
library(shiny)
?testServer
usethis::use_test()
devtools::load_all()
surveyApp()
library(shinytest)
install.packages("shinytest")
library(shinytest)
shinytest::installDependencies()
## init R6 object
app <- shinytest::ShinyDriver$new(surveyApp())
?ShinyDriver
## init R6 object
app <- shinytest::ShinyDriver$new(surveyApp)
## init R6 object
app <- shinytest::ShinyDriver$new(surveyApp())
## init R6 object
app <- shinytest::ShinyDriver$new(".")
ui <- shiny::fluidPage(
shinyjs::useShinyjs(),
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$cancellation)
shiny::observeEvent(input$answers, {
answers <<- get_answers(input$answers)
})
}
## init R6 object
app <- shinytest::ShinyDriver$new(shiny::shinyApp(ui, server))
app$getAllValues()
surveyApp()
surveyApp()
?app$click
?ShinyDriver
app$getAllValues()
app$click("sq_100i_0")
q1 <- app$findElement(xpath = r"(//*[@id="sq_100i_0"])")
q1 <- app$findElement(xpath = r"(/html/body/div[1]/div/div/form/div[2]/div[2]/div[1]/div/div[1]/div/div/div[2]/fieldset/div[1]/label/input)")
q1 <- app$findElement(r"(#sq_100i_0)")
q1 <- app$findElement("#sq_100i_0")
q1 <- app$findElement(xpath = r"(//*[@id="sq_100"]/div[2]/fieldset/div[1]/label/span[2]/span)")
q1 <- app$findElement("question.koCss().itemControl")
app$findElements()
app$checkUniqueWidgetNames()
app$listWidgets()
app$getAllValues()
app$getWindowSize()
app$getTitle()
app$getSource
app$getSource()
ShinyDriver$setInputs
app$getValue("container")
app$getValue("answers")
q1 <- app$findElement("//*[@id="sq_100i_0"]")
app$findElement("//*[@id=\"sq_100i_0\"]")
app$stop
app$stop()
rm(list = ls())
ui <- shiny::fluidPage(
shinyjs::useShinyjs(),
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$cancellation)
shiny::observeEvent(input$answers, {
answers <<- get_answers(input$answers)
})
}
test_that("surveyApp() produces expected answers", {
## init R6 object
app <- shinytest::ShinyDriver$new(shiny::shinyApp(ui, server))
app$findElement("//*[@id=\"sq_100i_0\"]")
expect_equal(2 * 2, 4)
})
## init R6 object
app <- shinytest::ShinyDriver$new(shiny::shinyApp(ui, server))
rm(list = ls())
ui <- shiny::fluidPage(
shinyjs::useShinyjs(),
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$cancellation)
shiny::observeEvent(input$answers, {
answers <<- get_answers(input$answers)
})
}
## init R6 object
app <- shinytest::ShinyDriver$new(shiny::shinyApp(ui, server))
devtools::load_all()
ui <- shiny::fluidPage(
shinyjs::useShinyjs(),
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$cancellation)
shiny::observeEvent(input$answers, {
answers <<- get_answers(input$answers)
})
}
## init R6 object
app <- shinytest::ShinyDriver$new(shiny::shinyApp(ui, server))
devtools::load_all()
library(shiny)
library(shinytest)
ui <- shiny::fluidPage(
shinyjs::useShinyjs(),
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$cancellation)
shiny::observeEvent(input$answers, {
answers <<- get_answers(input$answers)
})
}
## init R6 object
app <- shinytest::ShinyDriver$new(shiny::shinyApp(ui, server))
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$cancellation)
shiny::observeEvent(input$answers, {
answers <- get_answers(input$answers)
})
}
## init R6 object
app <- shinytest::ShinyDriver$new(shiny::shinyApp(ui, server))
app$findElement("//*[@id=\"sq_100i_0\"]")
app$findElement("/html/body/div[1]/div/div/form/div[2]/div[2]/div[1]/div/div[1]/div/div/div[2]/fieldset/div[1]/label/input")
app$findElements(xpath = "/html/body/div[1]")
app$findElements(xpath = "//*[@id=\"sq_100\"]")
app$findElements(xpath = "//*[@id=\"sq_100\"]")
app$findElements(xpath = "//*[@id=\"sq_100i_0\"]")
app$findElements(xpath = "//*[@id=\"sq_100\"]")
app$findElements(xpath = "//*[@id=\\\"sq_100\\\"]")
app$stop()
?shinytest::recordTest
shinytest::recordTest(surveyApp())
## init R6 object
app <- shinytest::ShinyDriver$new(shiny::shinyApp(ui, server))
recordTest(app)
devtools::load_all()
devtools::load_all()
library(shiny)
library(shinytest)
surveyApp()
ui <- shiny::fluidPage(
shinyjs::useShinyjs(),
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$cancellation)
shiny::observeEvent(input$answers, {
answers <- get_answers(input$answers)
})
}
rm(list = ls())
ui <- shiny::fluidPage(
shinyjs::useShinyjs(),
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$cancellation)
shiny::observeEvent(input$answers, {
answers <- get_answers(input$answers)
})
}
shinyApp(ui, server)
## init R6 object
app <- shinytest::ShinyDriver$new(shiny::shinyApp(ui, server))
recordTest(app = app)
ui <- shiny::fluidPage(
shinyjs::useShinyjs(),
useSurveyjr(theme = "modern"),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$cancellation)
shiny::observeEvent(input$answers, {
answers <- get_answers(input$answers)
})
}
shinyApp()
shinyApp(ui, server)
## init R6 object
app <- shinytest::ShinyDriver$new(shiny::shinyApp(ui, server))
recordTest(app)
search()
ls(envir = as.environment(".surveyjR"))
get("theme", envir = as.environment(".surveyjR"))
library(surveyjR)
recordTest(app)
devtools::load_all()
ui <- shiny::fluidPage(
shinyjs::useShinyjs(),
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$cancellation)
shiny::observeEvent(input$answers, {
answers <- get_answers(input$answers)
})
}
## init R6 object
app <- shinytest::ShinyDriver$new(shiny::shinyApp(ui, server))
recordTest(app)
library(shiny)
library(shinytest)
devtools::load_all()
ui <- shiny::fluidPage(
shinyjs::useShinyjs(),
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$cancellation)
shiny::observeEvent(input$answers, {
answers <- get_answers(input$answers)
})
}
## init R6 object
app <- shinytest::ShinyDriver$new(shiny::shinyApp(ui, server))
recordTest(app)
render_survey
rm(list = ls())
library(shiny)
library(shinytest)
devtools::load_all()
ui <- shiny::fluidPage(
shinyjs::useShinyjs(),
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$cancellation)
shiny::observeEvent(input$answers, {
answers <- get_answers(input$answers)
})
}
## init R6 object
app <- shinytest::ShinyDriver$new(shiny::shinyApp(ui, server))
recordTest(app)
app$stop()
search()
rm(list = ls())
library(shiny)
library(shinytest)
devtools::load_all()
ui <- shiny::fluidPage(
shinyjs::useShinyjs(),
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$cancellation)
shiny::observeEvent(input$answers, {
answers <- get_answers(input$answers)
})
}
## init R6 object
app <- shinytest::ShinyDriver$new(shiny::shinyApp(ui, server))
recordTest(app)
#theme <- get("theme", envir = as.environment(".surveyjR"))
rm(list = ls())
library(shiny)
library(shinytest)
devtools::load_all()
ui <- shiny::fluidPage(
shinyjs::useShinyjs(),
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$cancellation)
shiny::observeEvent(input$answers, {
answers <- get_answers(input$answers)
})
}
## init R6 object
app <- shinytest::ShinyDriver$new(shiny::shinyApp(ui, server))
recordTest(app)
rm(list = ls())
rm(list = ls())
library(shiny)
library(shinytest)
devtools::load_all()
ui <- shiny::fluidPage(
shinyjs::useShinyjs(),
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$cancellation)
shiny::observeEvent(input$answers, {
answers <- get_answers(input$answers)
})
}
## init R6 object
app <- shinytest::ShinyDriver$new(shiny::shinyApp(ui, server))
recordTest(app = app)
rm(list = ls())
library(shiny)
library(shinytest)
devtools::load_all()
ui <- shiny::fluidPage(
shinyjs::useShinyjs(),
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$cancellation)
shiny::observeEvent(input$answers, {
answers <- get_answers(input$answers)
})
}
## init R6 object
app <- shinytest::ShinyDriver$new(shiny::shinyApp(ui, server))
recordTest(app)
?get
theme <- get("theme", envir = as.environment(".surveyjR"))
debugonce(recordTest)
recordTest(app)
app$getSource()
getwd()
recordTest("./tests/test_app.R")
?recordTest
recordTest("./tests/app.R")
recordTest("./tests)
recordTest("./tests")
recordTest("./tests")
recordTest("./tests")
recordTest("./tests")
recordTest("./tests/testapp")
recordTest("./tests/testapp")
app$getAllValues()
rm(list = ls())
usethis::use_cran_badge()
?usethis::use_cran_badge
