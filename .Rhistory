survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY)
observeEvent(input$answers, {
cat("Answers retrieved\n")
answers <<- get_answers(input$answers)
cat("Answers restructured and now sending to DB\n")
## send to DB and potentially redirect...
})
shinyjs::js$getAnswer(id = "test", question_name = "using_duration")
observeEvent(input$test, {
cat("Single answer retrieved\n")
single_answer <<- input$test
})
}
shiny::shinyApp(ui, server)
library(shiny)
library(shinyjs)
library(htmltools)
rm(list = ls())
devtools::load_all()
THEME <-"bootstrap"
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "darkly"),
useShinyjs(),
useSurveyjr(theme = THEME),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY)
observeEvent(input$answers, {
cat("Answers retrieved\n")
answers <<- get_answers(input$answers)
cat("Answers restructured and now sending to DB\n")
## send to DB and potentially redirect...
})
shinyjs::js$getAnswer(id = "test", question_name = "using_duration")
observeEvent(input$test, {
cat("Single answer retrieved\n")
single_answer <<- input$test
})
}
shiny::shinyApp(ui, server)
library(shiny)
library(shinyjs)
library(htmltools)
rm(list = ls())
devtools::load_all()
THEME <-"bootstrap"
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "darkly"),
useShinyjs(),
useSurveyjr(theme = THEME),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY)
observeEvent(input$answers, {
cat("Answers retrieved\n")
answers <<- get_answers(input$answers)
cat("Answers restructured and now sending to DB\n")
## send to DB and potentially redirect...
})
shinyjs::js$getAnswer(id = "test", question_name = "using_duration")
observeEvent(input$test, {
cat("Single answer retrieved\n")
single_answer <<- input$test
})
}
shiny::shinyApp(ui, server)
library(shiny)
library(shinyjs)
library(htmltools)
rm(list = ls())
devtools::load_all()
THEME <-"bootstrap"
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "darkly"),
useShinyjs(),
useSurveyjr(theme = THEME),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY)
observeEvent(input$answers, {
cat("Answers retrieved\n")
answers <<- get_answers(input$answers)
cat("Answers restructured and now sending to DB\n")
## send to DB and potentially redirect...
})
shinyjs::js$getAnswer(id = "test", question_name = "using_duration")
observeEvent(input$test, {
cat("Single answer retrieved\n")
single_answer <<- input$test
})
}
shiny::shinyApp(ui, server)
# https://shiny.rstudio.com/articles/communicating-with-js.html
library(shiny)
library(shinyjs)
library(htmltools)
rm(list = ls())
devtools::load_all()
## TODO: pack into module...
## TODO: translation testing...
THEME <-"bootstrap"
## import survey here
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "darkly"),
useShinyjs(),
useSurveyjr(theme = THEME),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY)
observeEvent(input$answers, {
cat("Answers retrieved\n")
answers <<- get_answers(input$answers)
cat("Answers restructured and now sending to DB\n")
## send to DB and potentially redirect...
})
shinyjs::js$getAnswer(id = "test", question_name = "using_duration")
observeEvent(input$test, {
cat("Single answer retrieved\n")
single_answer <<- input$test
})
}
shiny::shinyApp(ui, server)
# create_env <- function() {
#   e <- new.env(parent = globalenv())
#   assign("e", e, envir = globalenv())
#   assign("a", 1, envir = e)
#   return("blobb")
# }
#
# create_env()
#
# rm(list = ls())
#
# ce <- function() {
#   e <- new.env(parent = globalenv())
#   attach(e)
#   assign("a", 1, as.environment("e"))
#   return(e$a)
# }
# ce()
# search()
# ls(envir = as.environment("e"))
# get("a", envir = as.environment("e"))
# detach("e")
# search()
#
# ls(envir = as.environment(".GlobalEnv"))
library(shiny)
library(shinyjs)
library(htmltools)
rm(list = ls())
devtools::load_all()
THEME <-"bootstrap"
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "darkly"),
useShinyjs(),
useSurveyjr(theme = THEME),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY)
observeEvent(input$answers, {
cat("Answers retrieved\n")
answers <<- get_answers(input$answers)
cat("Answers restructured and now sending to DB\n")
## send to DB and potentially redirect...
})
shinyjs::js$getAnswer(id = "test", question_name = "using_duration")
observeEvent(input$test, {
cat("Single answer retrieved\n")
single_answer <<- input$test
})
}
shiny::shinyApp(ui, server)
library(shiny)
library(shinyjs)
library(htmltools)
rm(list = ls())
devtools::load_all()
THEME <-"bootstrap"
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "darkly"),
useShinyjs(),
useSurveyjr(theme = THEME),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY)
observeEvent(input$answers, {
cat("Answers retrieved\n")
answers <<- get_answers(input$answers)
cat("Answers restructured and now sending to DB\n")
## send to DB and potentially redirect...
})
}
shiny::shinyApp(ui, server)
# https://shiny.rstudio.com/articles/communicating-with-js.html
library(shiny)
library(shinyjs)
library(htmltools)
rm(list = ls())
devtools::load_all()
## TODO: pack into module...
## TODO: translation testing...
THEME <-"bootstrap"
## import survey here
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "darkly"),
useShinyjs(),
useSurveyjr(theme = THEME),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY)
observeEvent(input$answers, {
cat("Answers retrieved\n")
answers <<- get_answers(input$answers)
cat("Answers restructured and now sending to DB\n")
## send to DB and potentially redirect...
})
}
shiny::shinyApp(ui, server)
# create_env <- function() {
#   e <- new.env(parent = globalenv())
#   assign("e", e, envir = globalenv())
#   assign("a", 1, envir = e)
#   return("blobb")
# }
#
# create_env()
#
# rm(list = ls())
#
# ce <- function() {
#   e <- new.env(parent = globalenv())
#   attach(e)
#   assign("a", 1, as.environment("e"))
#   return(e$a)
# }
# ce()
# search()
# ls(envir = as.environment("e"))
# get("a", envir = as.environment("e"))
# detach("e")
# search()
#
# ls(envir = as.environment(".GlobalEnv"))
devtools::load_all()
cancellation <- import_survey("./data-raw/survey_cancellation.json")
market_fit <- import_survey("./data-raw/survey_market_fit.json")
SURVEY <- list(cancellation = cancellation, market_fit = market_fit)
usethis::use_data(SURVEY, overwrite = TRUE)
library(shiny)
library(shinyjs)
library(htmltools)
rm(list = ls())
devtools::load_all()
THEME <-"bootstrap"
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "darkly"),
useShinyjs(),
useSurveyjr(theme = THEME),
survey_output("container")
)
SURVEY
str(SURVEY)
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "darkly"),
useShinyjs(),
useSurveyjr(theme = THEME),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$market_fit)
observeEvent(input$answers, {
cat("Answers retrieved\n")
answers <<- get_answers(input$answers)
cat("Answers restructured and now sending to DB\n")
## send to DB and potentially redirect...
})
}
shiny::shinyApp(ui, server)
answers
# https://shiny.rstudio.com/articles/communicating-with-js.html
library(shiny)
library(shinyjs)
library(htmltools)
rm(list = ls())
devtools::load_all()
## TODO: pack into module...
## TODO: translation testing...
THEME <-"bootstrap"
## import survey here
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "darkly"),
useShinyjs(),
useSurveyjr(theme = THEME),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$market_fit)
observeEvent(input$answers, {
cat("Answers retrieved\n")
answers <<- get_answers(input$answers)
cat("Answers restructured and now sending to DB\n")
## send to DB and potentially redirect...
})
}
shiny::shinyApp(ui, server)
# create_env <- function() {
#   e <- new.env(parent = globalenv())
#   assign("e", e, envir = globalenv())
#   assign("a", 1, envir = e)
#   return("blobb")
# }
#
# create_env()
#
# rm(list = ls())
#
# ce <- function() {
#   e <- new.env(parent = globalenv())
#   attach(e)
#   assign("a", 1, as.environment("e"))
#   return(e$a)
# }
# ce()
# search()
# ls(envir = as.environment("e"))
# get("a", envir = as.environment("e"))
# detach("e")
# search()
#
# ls(envir = as.environment(".GlobalEnv"))
answers
as.data.frame(answers)
library(dplyr)
as.data.frame(answers) -> test
tibble(test)
view(test)
View(test)
rm(list = ls())
devtools::load_all()
THEME <-"bootstrap"
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "darkly"),
useShinyjs(),
useSurveyjr(theme = THEME),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY$market_fit)
observeEvent(input$answers, {
cat("Answers retrieved\n")
answers <<- get_answers(input$answers)
cat("Answers restructured and now sending to DB\n")
## send to DB and potentially redirect...
})
}
shiny::shinyApp(ui, server)
answers
devtools::load_all()
cancellation <- import_survey("./data-raw/survey_cancellation.json")
market_fit <- import_survey("./data-raw/survey_market_fit.json")
patient <- import_survey("./data-raw/survey_patient.json")
SURVEY <- list(cancellation = cancellation, market_fit = market_fit, patient = patient)
usethis::use_data(SURVEY, overwrite = TRUE)
library(shiny)
library(shinyjs)
library(htmltools)
rm(list = ls())
devtools::load_all()
THEME <-"bootstrap"
EXAMPLE <- SURVEY$patient
ui <- fluidPage(
theme = bslib::bs_theme(bootswatch = "darkly"),
useShinyjs(),
useSurveyjr(theme = THEME),
survey_output("container")
)
server <- function(input, output, session) {
render_survey(id_container = "container",
id_answers = "answers",
survey_json = EXAMPLE)
observeEvent(input$answers, {
cat("Answers retrieved\n")
answers <<- get_answers(input$answers)
cat("Answers restructured and now sending to DB\n")
## send to DB and potentially redirect...
})
}
shiny::shinyApp(ui, server)
answers
tibble(answers)
View(answers)
library(tidyverse)
test <- answers %>% pivot_longer()
test <- answers %>% pivot_longer(cols = everything())
answers
tibble(answers)
answers %>% gather(key, value)
answers %>% gather(key, value) %>% as_tibble()
answers %>% gather(key, value) %>% as_tibble()
library(shinyjs)
help(package = "shinyjs")
runExample("sandbox")
devtools::load_all()
debugonce(useSurveyjr)
useSurveyjr()
theme
?match.arg
devtools::load_all()
debugonce(useSurveyjr)
useSurveyjr()
theme()
debugonce(useSurveyjr)
useSurveyjr(theme = "modern")
SURVEY
names(SURVEY)
SURVEY[["cancellation"]]
names(SURVEY)
runExample <- function(bootswatch, survey = c("cancellation", "market_fit", "patient")) {
## import survey.json with surveyjR::import_survey()
ui <- fluidPage(
## surveyjR works nicely together with bootswatch themes
theme = bslib::bs_theme(bootswatch = bootswatch),
## shinyjs needs to be registered
useShinyjs(),
## alternatively, a theme can be chosen in useSurveyjr
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
## id_answers will write the answers to input$id_answers
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY[[survey]])
observeEvent(input$answers, {
## pass input$id_answers to get_answers
answers <<- get_answers(input$answers)
## reformat, send to DB and potentially redirect...
})
}
shiny::shinyApp(ui, server)
return(answers)
}
runExample()
runExample(bootswatch = "darkly")
runExample <- function(bootswatch, survey = c("cancellation", "market_fit", "patient")) {
## import survey.json with surveyjR::import_survey()
ui <- fluidPage(
## surveyjR works nicely together with bootswatch themes
theme = bslib::bs_theme(bootswatch = bootswatch),
## shinyjs needs to be registered
useShinyjs(),
## alternatively, a theme can be chosen in useSurveyjr
useSurveyjr(),
survey_output("container")
)
server <- function(input, output, session) {
## id_answers will write the answers to input$id_answers
render_survey(id_container = "container",
id_answers = "answers",
survey_json = SURVEY[[survey]])
observeEvent(input$answers, {
## pass input$id_answers to get_answers
answers <<- get_answers(input$answers)
## reformat, send to DB and potentially redirect...
})
}
shiny::shinyApp(ui, server)
}
runExample()
runExample(bootswatch = "darkly")
devtools::load_all()
devtools::load_all()
run_example_survey(bootswatch = "darkly")
devtools::load_all()
run_example_survey(bootswatch = "darkly")
usethis::use_package("shiny")
bslib::theme_bootswatch()
bslib::bootswatch_themes()
usethis::use_package("jsonlite")
